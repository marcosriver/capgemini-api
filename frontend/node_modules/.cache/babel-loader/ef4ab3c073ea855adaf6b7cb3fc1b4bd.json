{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar FractionJs = require('fraction.js');\n\nvar Prefixer = require('./prefixer');\n\nvar utils = require('./utils');\n\nvar REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi;\nvar SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i;\n\nvar Resolution = /*#__PURE__*/function (_Prefixer) {\n  \"use strict\";\n\n  _inherits(Resolution, _Prefixer);\n\n  var _super = _createSuper(Resolution);\n\n  function Resolution() {\n    _classCallCheck(this, Resolution);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Resolution, [{\n    key: \"prefixName\",\n    value:\n    /**\n     * Return prefixed query name\n     */\n    function prefixName(prefix, name) {\n      if (prefix === '-moz-') {\n        return name + '--moz-device-pixel-ratio';\n      } else {\n        return prefix + name + '-device-pixel-ratio';\n      }\n    }\n    /**\n     * Return prefixed query\n     */\n\n  }, {\n    key: \"prefixQuery\",\n    value: function prefixQuery(prefix, name, colon, value, units) {\n      value = new FractionJs(value); // 1dpcm = 2.54dpi\n      // 1dppx = 96dpi\n\n      if (units === 'dpi') {\n        value = value.div(96);\n      } else if (units === 'dpcm') {\n        value = value.mul(2.54).div(96);\n      }\n\n      value = value.simplify();\n\n      if (prefix === '-o-') {\n        value = value.n + '/' + value.d;\n      }\n\n      return this.prefixName(prefix, name) + colon + value;\n    }\n    /**\n     * Remove prefixed queries\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean(rule) {\n      var _this = this;\n\n      if (!this.bad) {\n        this.bad = [];\n\n        var _iterator = _createForOfIteratorHelper(this.prefixes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var prefix = _step.value;\n            this.bad.push(this.prefixName(prefix, 'min'));\n            this.bad.push(this.prefixName(prefix, 'max'));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      rule.params = utils.editList(rule.params, function (queries) {\n        return queries.filter(function (query) {\n          return _this.bad.every(function (i) {\n            return !query.includes(i);\n          });\n        });\n      });\n    }\n    /**\n     * Add prefixed queries\n     */\n\n  }, {\n    key: \"process\",\n    value: function process(rule) {\n      var _this2 = this;\n\n      var parent = this.parentPrefix(rule);\n      var prefixes = parent ? [parent] : this.prefixes;\n      rule.params = utils.editList(rule.params, function (origin, prefixed) {\n        var _iterator2 = _createForOfIteratorHelper(origin),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var query = _step2.value;\n\n            if (!query.includes('min-resolution') && !query.includes('max-resolution')) {\n              prefixed.push(query);\n              continue;\n            }\n\n            var _iterator3 = _createForOfIteratorHelper(prefixes),\n                _step3;\n\n            try {\n              var _loop = function _loop() {\n                var prefix = _step3.value;\n                var processed = query.replace(REGEXP, function (str) {\n                  var parts = str.match(SPLIT);\n                  return _this2.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n                });\n                prefixed.push(processed);\n              };\n\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                _loop();\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            prefixed.push(query);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return utils.uniq(prefixed);\n      });\n    }\n  }]);\n\n  return Resolution;\n}(Prefixer);\n\nmodule.exports = Resolution;","map":{"version":3,"names":["FractionJs","require","Prefixer","utils","REGEXP","SPLIT","Resolution","prefix","name","colon","value","units","div","mul","simplify","n","d","prefixName","rule","bad","prefixes","push","params","editList","queries","filter","query","every","i","includes","parent","parentPrefix","origin","prefixed","processed","replace","str","parts","match","prefixQuery","uniq","module","exports"],"sources":["C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/autoprefixer/lib/resolution.js"],"sourcesContent":["let FractionJs = require('fraction.js')\n\nlet Prefixer = require('./prefixer')\nlet utils = require('./utils')\n\nconst REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi\nconst SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i\n\nclass Resolution extends Prefixer {\n  /**\n   * Return prefixed query name\n   */\n  prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio'\n    } else {\n      return prefix + name + '-device-pixel-ratio'\n    }\n  }\n\n  /**\n   * Return prefixed query\n   */\n  prefixQuery(prefix, name, colon, value, units) {\n    value = new FractionJs(value)\n\n    // 1dpcm = 2.54dpi\n    // 1dppx = 96dpi\n    if (units === 'dpi') {\n      value = value.div(96)\n    } else if (units === 'dpcm') {\n      value = value.mul(2.54).div(96)\n    }\n    value = value.simplify()\n\n    if (prefix === '-o-') {\n      value = value.n + '/' + value.d\n    }\n    return this.prefixName(prefix, name) + colon + value\n  }\n\n  /**\n   * Remove prefixed queries\n   */\n  clean(rule) {\n    if (!this.bad) {\n      this.bad = []\n      for (let prefix of this.prefixes) {\n        this.bad.push(this.prefixName(prefix, 'min'))\n        this.bad.push(this.prefixName(prefix, 'max'))\n      }\n    }\n\n    rule.params = utils.editList(rule.params, queries => {\n      return queries.filter(query => this.bad.every(i => !query.includes(i)))\n    })\n  }\n\n  /**\n   * Add prefixed queries\n   */\n  process(rule) {\n    let parent = this.parentPrefix(rule)\n    let prefixes = parent ? [parent] : this.prefixes\n\n    rule.params = utils.editList(rule.params, (origin, prefixed) => {\n      for (let query of origin) {\n        if (\n          !query.includes('min-resolution') &&\n          !query.includes('max-resolution')\n        ) {\n          prefixed.push(query)\n          continue\n        }\n\n        for (let prefix of prefixes) {\n          let processed = query.replace(REGEXP, str => {\n            let parts = str.match(SPLIT)\n            return this.prefixQuery(\n              prefix,\n              parts[1],\n              parts[2],\n              parts[3],\n              parts[4]\n            )\n          })\n          prefixed.push(processed)\n        }\n        prefixed.push(query)\n      }\n\n      return utils.uniq(prefixed)\n    })\n  }\n}\n\nmodule.exports = Resolution\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}