{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Declaration = require('./declaration');\n\nvar tokenizer = require('./tokenize');\n\nvar Comment = require('./comment');\n\nvar AtRule = require('./at-rule');\n\nvar Root = require('./root');\n\nvar Rule = require('./rule');\n\nvar SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n};\n\nfunction findLastWithPosition(tokens) {\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n    var pos = token[3] || token[2];\n    if (pos) return pos;\n  }\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(input) {\n    _classCallCheck(this, Parser);\n\n    this.input = input;\n    this.root = new Root();\n    this.current = this.root;\n    this.spaces = '';\n    this.semicolon = false;\n    this.customProperty = false;\n    this.createTokenizer();\n    this.root.source = {\n      input: input,\n      start: {\n        offset: 0,\n        line: 1,\n        column: 1\n      }\n    };\n  }\n\n  _createClass(Parser, [{\n    key: \"createTokenizer\",\n    value: function createTokenizer() {\n      this.tokenizer = tokenizer(this.input);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      var token;\n\n      while (!this.tokenizer.endOfFile()) {\n        token = this.tokenizer.nextToken();\n\n        switch (token[0]) {\n          case 'space':\n            this.spaces += token[1];\n            break;\n\n          case ';':\n            this.freeSemicolon(token);\n            break;\n\n          case '}':\n            this.end(token);\n            break;\n\n          case 'comment':\n            this.comment(token);\n            break;\n\n          case 'at-word':\n            this.atrule(token);\n            break;\n\n          case '{':\n            this.emptyRule(token);\n            break;\n\n          default:\n            this.other(token);\n            break;\n        }\n      }\n\n      this.endFile();\n    }\n  }, {\n    key: \"comment\",\n    value: function comment(token) {\n      var node = new Comment();\n      this.init(node, token[2]);\n      node.source.end = this.getPosition(token[3] || token[2]);\n      var text = token[1].slice(2, -2);\n\n      if (/^\\s*$/.test(text)) {\n        node.text = '';\n        node.raws.left = text;\n        node.raws.right = '';\n      } else {\n        var match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n        node.text = match[2];\n        node.raws.left = match[1];\n        node.raws.right = match[3];\n      }\n    }\n  }, {\n    key: \"emptyRule\",\n    value: function emptyRule(token) {\n      var node = new Rule();\n      this.init(node, token[2]);\n      node.selector = '';\n      node.raws.between = '';\n      this.current = node;\n    }\n  }, {\n    key: \"other\",\n    value: function other(start) {\n      var end = false;\n      var type = null;\n      var colon = false;\n      var bracket = null;\n      var brackets = [];\n      var customProperty = start[1].startsWith('--');\n      var tokens = [];\n      var token = start;\n\n      while (token) {\n        type = token[0];\n        tokens.push(token);\n\n        if (type === '(' || type === '[') {\n          if (!bracket) bracket = token;\n          brackets.push(type === '(' ? ')' : ']');\n        } else if (customProperty && colon && type === '{') {\n          if (!bracket) bracket = token;\n          brackets.push('}');\n        } else if (brackets.length === 0) {\n          if (type === ';') {\n            if (colon) {\n              this.decl(tokens, customProperty);\n              return;\n            } else {\n              break;\n            }\n          } else if (type === '{') {\n            this.rule(tokens);\n            return;\n          } else if (type === '}') {\n            this.tokenizer.back(tokens.pop());\n            end = true;\n            break;\n          } else if (type === ':') {\n            colon = true;\n          }\n        } else if (type === brackets[brackets.length - 1]) {\n          brackets.pop();\n          if (brackets.length === 0) bracket = null;\n        }\n\n        token = this.tokenizer.nextToken();\n      }\n\n      if (this.tokenizer.endOfFile()) end = true;\n      if (brackets.length > 0) this.unclosedBracket(bracket);\n\n      if (end && colon) {\n        if (!customProperty) {\n          while (tokens.length) {\n            token = tokens[tokens.length - 1][0];\n            if (token !== 'space' && token !== 'comment') break;\n            this.tokenizer.back(tokens.pop());\n          }\n        }\n\n        this.decl(tokens, customProperty);\n      } else {\n        this.unknownWord(tokens);\n      }\n    }\n  }, {\n    key: \"rule\",\n    value: function rule(tokens) {\n      tokens.pop();\n      var node = new Rule();\n      this.init(node, tokens[0][2]);\n      node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n      this.raw(node, 'selector', tokens);\n      this.current = node;\n    }\n  }, {\n    key: \"decl\",\n    value: function decl(tokens, customProperty) {\n      var node = new Declaration();\n      this.init(node, tokens[0][2]);\n      var last = tokens[tokens.length - 1];\n\n      if (last[0] === ';') {\n        this.semicolon = true;\n        tokens.pop();\n      }\n\n      node.source.end = this.getPosition(last[3] || last[2] || findLastWithPosition(tokens));\n\n      while (tokens[0][0] !== 'word') {\n        if (tokens.length === 1) this.unknownWord(tokens);\n        node.raws.before += tokens.shift()[1];\n      }\n\n      node.source.start = this.getPosition(tokens[0][2]);\n      node.prop = '';\n\n      while (tokens.length) {\n        var type = tokens[0][0];\n\n        if (type === ':' || type === 'space' || type === 'comment') {\n          break;\n        }\n\n        node.prop += tokens.shift()[1];\n      }\n\n      node.raws.between = '';\n      var token;\n\n      while (tokens.length) {\n        token = tokens.shift();\n\n        if (token[0] === ':') {\n          node.raws.between += token[1];\n          break;\n        } else {\n          if (token[0] === 'word' && /\\w/.test(token[1])) {\n            this.unknownWord([token]);\n          }\n\n          node.raws.between += token[1];\n        }\n      }\n\n      if (node.prop[0] === '_' || node.prop[0] === '*') {\n        node.raws.before += node.prop[0];\n        node.prop = node.prop.slice(1);\n      }\n\n      var firstSpaces = [];\n      var next;\n\n      while (tokens.length) {\n        next = tokens[0][0];\n        if (next !== 'space' && next !== 'comment') break;\n        firstSpaces.push(tokens.shift());\n      }\n\n      this.precheckMissedSemicolon(tokens);\n\n      for (var i = tokens.length - 1; i >= 0; i--) {\n        token = tokens[i];\n\n        if (token[1].toLowerCase() === '!important') {\n          node.important = true;\n          var string = this.stringFrom(tokens, i);\n          string = this.spacesFromEnd(tokens) + string;\n          if (string !== ' !important') node.raws.important = string;\n          break;\n        } else if (token[1].toLowerCase() === 'important') {\n          var cache = tokens.slice(0);\n          var str = '';\n\n          for (var j = i; j > 0; j--) {\n            var _type = cache[j][0];\n\n            if (str.trim().indexOf('!') === 0 && _type !== 'space') {\n              break;\n            }\n\n            str = cache.pop()[1] + str;\n          }\n\n          if (str.trim().indexOf('!') === 0) {\n            node.important = true;\n            node.raws.important = str;\n            tokens = cache;\n          }\n        }\n\n        if (token[0] !== 'space' && token[0] !== 'comment') {\n          break;\n        }\n      }\n\n      var hasWord = tokens.some(function (i) {\n        return i[0] !== 'space' && i[0] !== 'comment';\n      });\n\n      if (hasWord) {\n        node.raws.between += firstSpaces.map(function (i) {\n          return i[1];\n        }).join('');\n        firstSpaces = [];\n      }\n\n      this.raw(node, 'value', firstSpaces.concat(tokens), customProperty);\n\n      if (node.value.includes(':') && !customProperty) {\n        this.checkMissedSemicolon(tokens);\n      }\n    }\n  }, {\n    key: \"atrule\",\n    value: function atrule(token) {\n      var node = new AtRule();\n      node.name = token[1].slice(1);\n\n      if (node.name === '') {\n        this.unnamedAtrule(node, token);\n      }\n\n      this.init(node, token[2]);\n      var type;\n      var prev;\n      var shift;\n      var last = false;\n      var open = false;\n      var params = [];\n      var brackets = [];\n\n      while (!this.tokenizer.endOfFile()) {\n        token = this.tokenizer.nextToken();\n        type = token[0];\n\n        if (type === '(' || type === '[') {\n          brackets.push(type === '(' ? ')' : ']');\n        } else if (type === '{' && brackets.length > 0) {\n          brackets.push('}');\n        } else if (type === brackets[brackets.length - 1]) {\n          brackets.pop();\n        }\n\n        if (brackets.length === 0) {\n          if (type === ';') {\n            node.source.end = this.getPosition(token[2]);\n            this.semicolon = true;\n            break;\n          } else if (type === '{') {\n            open = true;\n            break;\n          } else if (type === '}') {\n            if (params.length > 0) {\n              shift = params.length - 1;\n              prev = params[shift];\n\n              while (prev && prev[0] === 'space') {\n                prev = params[--shift];\n              }\n\n              if (prev) {\n                node.source.end = this.getPosition(prev[3] || prev[2]);\n              }\n            }\n\n            this.end(token);\n            break;\n          } else {\n            params.push(token);\n          }\n        } else {\n          params.push(token);\n        }\n\n        if (this.tokenizer.endOfFile()) {\n          last = true;\n          break;\n        }\n      }\n\n      node.raws.between = this.spacesAndCommentsFromEnd(params);\n\n      if (params.length) {\n        node.raws.afterName = this.spacesAndCommentsFromStart(params);\n        this.raw(node, 'params', params);\n\n        if (last) {\n          token = params[params.length - 1];\n          node.source.end = this.getPosition(token[3] || token[2]);\n          this.spaces = node.raws.between;\n          node.raws.between = '';\n        }\n      } else {\n        node.raws.afterName = '';\n        node.params = '';\n      }\n\n      if (open) {\n        node.nodes = [];\n        this.current = node;\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end(token) {\n      if (this.current.nodes && this.current.nodes.length) {\n        this.current.raws.semicolon = this.semicolon;\n      }\n\n      this.semicolon = false;\n      this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n      this.spaces = '';\n\n      if (this.current.parent) {\n        this.current.source.end = this.getPosition(token[2]);\n        this.current = this.current.parent;\n      } else {\n        this.unexpectedClose(token);\n      }\n    }\n  }, {\n    key: \"endFile\",\n    value: function endFile() {\n      if (this.current.parent) this.unclosedBlock();\n\n      if (this.current.nodes && this.current.nodes.length) {\n        this.current.raws.semicolon = this.semicolon;\n      }\n\n      this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n    }\n  }, {\n    key: \"freeSemicolon\",\n    value: function freeSemicolon(token) {\n      this.spaces += token[1];\n\n      if (this.current.nodes) {\n        var prev = this.current.nodes[this.current.nodes.length - 1];\n\n        if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n          prev.raws.ownSemicolon = this.spaces;\n          this.spaces = '';\n        }\n      }\n    } // Helpers\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(offset) {\n      var pos = this.input.fromOffset(offset);\n      return {\n        offset: offset,\n        line: pos.line,\n        column: pos.col\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(node, offset) {\n      this.current.push(node);\n      node.source = {\n        start: this.getPosition(offset),\n        input: this.input\n      };\n      node.raws.before = this.spaces;\n      this.spaces = '';\n      if (node.type !== 'comment') this.semicolon = false;\n    }\n  }, {\n    key: \"raw\",\n    value: function raw(node, prop, tokens, customProperty) {\n      var token, type;\n      var length = tokens.length;\n      var value = '';\n      var clean = true;\n      var next, prev;\n\n      for (var i = 0; i < length; i += 1) {\n        token = tokens[i];\n        type = token[0];\n\n        if (type === 'space' && i === length - 1 && !customProperty) {\n          clean = false;\n        } else if (type === 'comment') {\n          prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty';\n          next = tokens[i + 1] ? tokens[i + 1][0] : 'empty';\n\n          if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n            if (value.slice(-1) === ',') {\n              clean = false;\n            } else {\n              value += token[1];\n            }\n          } else {\n            clean = false;\n          }\n        } else {\n          value += token[1];\n        }\n      }\n\n      if (!clean) {\n        var raw = tokens.reduce(function (all, i) {\n          return all + i[1];\n        }, '');\n        node.raws[prop] = {\n          value: value,\n          raw: raw\n        };\n      }\n\n      node[prop] = value;\n    }\n  }, {\n    key: \"spacesAndCommentsFromEnd\",\n    value: function spacesAndCommentsFromEnd(tokens) {\n      var lastTokenType;\n      var spaces = '';\n\n      while (tokens.length) {\n        lastTokenType = tokens[tokens.length - 1][0];\n        if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;\n        spaces = tokens.pop()[1] + spaces;\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"spacesAndCommentsFromStart\",\n    value: function spacesAndCommentsFromStart(tokens) {\n      var next;\n      var spaces = '';\n\n      while (tokens.length) {\n        next = tokens[0][0];\n        if (next !== 'space' && next !== 'comment') break;\n        spaces += tokens.shift()[1];\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"spacesFromEnd\",\n    value: function spacesFromEnd(tokens) {\n      var lastTokenType;\n      var spaces = '';\n\n      while (tokens.length) {\n        lastTokenType = tokens[tokens.length - 1][0];\n        if (lastTokenType !== 'space') break;\n        spaces = tokens.pop()[1] + spaces;\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"stringFrom\",\n    value: function stringFrom(tokens, from) {\n      var result = '';\n\n      for (var i = from; i < tokens.length; i++) {\n        result += tokens[i][1];\n      }\n\n      tokens.splice(from, tokens.length - from);\n      return result;\n    }\n  }, {\n    key: \"colon\",\n    value: function colon(tokens) {\n      var brackets = 0;\n      var token, type, prev;\n\n      var _iterator = _createForOfIteratorHelper(tokens.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              i = _step$value[0],\n              element = _step$value[1];\n\n          token = element;\n          type = token[0];\n\n          if (type === '(') {\n            brackets += 1;\n          }\n\n          if (type === ')') {\n            brackets -= 1;\n          }\n\n          if (brackets === 0 && type === ':') {\n            if (!prev) {\n              this.doubleColon(token);\n            } else if (prev[0] === 'word' && prev[1] === 'progid') {\n              continue;\n            } else {\n              return i;\n            }\n          }\n\n          prev = token;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    } // Errors\n\n  }, {\n    key: \"unclosedBracket\",\n    value: function unclosedBracket(bracket) {\n      throw this.input.error('Unclosed bracket', {\n        offset: bracket[2]\n      }, {\n        offset: bracket[2] + 1\n      });\n    }\n  }, {\n    key: \"unknownWord\",\n    value: function unknownWord(tokens) {\n      throw this.input.error('Unknown word', {\n        offset: tokens[0][2]\n      }, {\n        offset: tokens[0][2] + tokens[0][1].length\n      });\n    }\n  }, {\n    key: \"unexpectedClose\",\n    value: function unexpectedClose(token) {\n      throw this.input.error('Unexpected }', {\n        offset: token[2]\n      }, {\n        offset: token[2] + 1\n      });\n    }\n  }, {\n    key: \"unclosedBlock\",\n    value: function unclosedBlock() {\n      var pos = this.current.source.start;\n      throw this.input.error('Unclosed block', pos.line, pos.column);\n    }\n  }, {\n    key: \"doubleColon\",\n    value: function doubleColon(token) {\n      throw this.input.error('Double colon', {\n        offset: token[2]\n      }, {\n        offset: token[2] + token[1].length\n      });\n    }\n  }, {\n    key: \"unnamedAtrule\",\n    value: function unnamedAtrule(node, token) {\n      throw this.input.error('At-rule without name', {\n        offset: token[2]\n      }, {\n        offset: token[2] + token[1].length\n      });\n    }\n  }, {\n    key: \"precheckMissedSemicolon\",\n    value: function\n      /* tokens */\n    precheckMissedSemicolon() {// Hook for Safe Parser\n    }\n  }, {\n    key: \"checkMissedSemicolon\",\n    value: function checkMissedSemicolon(tokens) {\n      var colon = this.colon(tokens);\n      if (colon === false) return;\n      var founded = 0;\n      var token;\n\n      for (var j = colon - 1; j >= 0; j--) {\n        token = tokens[j];\n\n        if (token[0] !== 'space') {\n          founded += 1;\n          if (founded === 2) break;\n        }\n      } // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n      // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n      // And because we need it after that one we do +1 to get the next one.\n\n\n      throw this.input.error('Missed semicolon', token[0] === 'word' ? token[3] + 1 : token[2]);\n    }\n  }]);\n\n  return Parser;\n}();\n\nmodule.exports = Parser;","map":{"version":3,"names":["Declaration","require","tokenizer","Comment","AtRule","Root","Rule","SAFE_COMMENT_NEIGHBOR","empty","space","findLastWithPosition","tokens","i","length","token","pos","Parser","input","root","current","spaces","semicolon","customProperty","createTokenizer","source","start","offset","line","column","endOfFile","nextToken","freeSemicolon","end","comment","atrule","emptyRule","other","endFile","node","init","getPosition","text","slice","test","raws","left","right","match","selector","between","type","colon","bracket","brackets","startsWith","push","decl","rule","back","pop","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","raw","last","before","shift","prop","firstSpaces","next","precheckMissedSemicolon","toLowerCase","important","string","stringFrom","spacesFromEnd","cache","str","j","trim","indexOf","hasWord","some","map","join","concat","value","includes","checkMissedSemicolon","name","unnamedAtrule","prev","open","params","afterName","spacesAndCommentsFromStart","nodes","after","parent","unexpectedClose","unclosedBlock","ownSemicolon","fromOffset","col","clean","reduce","all","lastTokenType","from","result","splice","entries","element","doubleColon","error","founded","module","exports"],"sources":["C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/postcss/lib/parser.js"],"sourcesContent":["'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}