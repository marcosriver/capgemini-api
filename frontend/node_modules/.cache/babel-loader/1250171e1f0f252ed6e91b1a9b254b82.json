{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n\nvar brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse: function parse(str) {\n    var current = [''];\n    var stack = [current];\n\n    var _iterator = _createForOfIteratorHelper(str),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var sym = _step.value;\n\n        if (sym === '(') {\n          current = [''];\n          last(stack).push(current);\n          stack.push(current);\n          continue;\n        }\n\n        if (sym === ')') {\n          stack.pop();\n          current = last(stack);\n          current.push('');\n          continue;\n        }\n\n        current[current.length - 1] += sym;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return stack[0];\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify: function stringify(ast) {\n    var result = '';\n\n    var _iterator2 = _createForOfIteratorHelper(ast),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var i = _step2.value;\n\n        if (typeof i === 'object') {\n          result += \"(\".concat(brackets.stringify(i), \")\");\n          continue;\n        }\n\n        result += i;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return result;\n  }\n};\nmodule.exports = brackets;","map":{"version":3,"names":["last","array","length","brackets","parse","str","current","stack","sym","push","pop","stringify","ast","result","i","module","exports"],"sources":["C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/autoprefixer/lib/brackets.js"],"sourcesContent":["function last(array) {\n  return array[array.length - 1]\n}\n\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse(str) {\n    let current = ['']\n    let stack = [current]\n\n    for (let sym of str) {\n      if (sym === '(') {\n        current = ['']\n        last(stack).push(current)\n        stack.push(current)\n        continue\n      }\n\n      if (sym === ')') {\n        stack.pop()\n        current = last(stack)\n        current.push('')\n        continue\n      }\n\n      current[current.length - 1] += sym\n    }\n\n    return stack[0]\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify(ast) {\n    let result = ''\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`\n        continue\n      }\n\n      result += i\n    }\n    return result\n  }\n}\n\nmodule.exports = brackets\n"],"mappings":";;AAAA,SAASA,IAAT,CAAcC,KAAd,EAAqB;EACnB,OAAOA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAZ;AACD;;AAED,IAAIC,QAAQ,GAAG;EACb;AACF;AACA;EACEC,KAJa,iBAIPC,GAJO,EAIF;IACT,IAAIC,OAAO,GAAG,CAAC,EAAD,CAAd;IACA,IAAIC,KAAK,GAAG,CAACD,OAAD,CAAZ;;IAFS,2CAIOD,GAJP;IAAA;;IAAA;MAIT,oDAAqB;QAAA,IAAZG,GAAY;;QACnB,IAAIA,GAAG,KAAK,GAAZ,EAAiB;UACfF,OAAO,GAAG,CAAC,EAAD,CAAV;UACAN,IAAI,CAACO,KAAD,CAAJ,CAAYE,IAAZ,CAAiBH,OAAjB;UACAC,KAAK,CAACE,IAAN,CAAWH,OAAX;UACA;QACD;;QAED,IAAIE,GAAG,KAAK,GAAZ,EAAiB;UACfD,KAAK,CAACG,GAAN;UACAJ,OAAO,GAAGN,IAAI,CAACO,KAAD,CAAd;UACAD,OAAO,CAACG,IAAR,CAAa,EAAb;UACA;QACD;;QAEDH,OAAO,CAACA,OAAO,CAACJ,MAAR,GAAiB,CAAlB,CAAP,IAA+BM,GAA/B;MACD;IApBQ;MAAA;IAAA;MAAA;IAAA;;IAsBT,OAAOD,KAAK,CAAC,CAAD,CAAZ;EACD,CA3BY;;EA6Bb;AACF;AACA;EACEI,SAhCa,qBAgCHC,GAhCG,EAgCE;IACb,IAAIC,MAAM,GAAG,EAAb;;IADa,4CAECD,GAFD;IAAA;;IAAA;MAEb,uDAAmB;QAAA,IAAVE,CAAU;;QACjB,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;UACzBD,MAAM,eAAQV,QAAQ,CAACQ,SAAT,CAAmBG,CAAnB,CAAR,MAAN;UACA;QACD;;QAEDD,MAAM,IAAIC,CAAV;MACD;IATY;MAAA;IAAA;MAAA;IAAA;;IAUb,OAAOD,MAAP;EACD;AA3CY,CAAf;AA8CAE,MAAM,CAACC,OAAP,GAAiBb,QAAjB"},"metadata":{},"sourceType":"script"}