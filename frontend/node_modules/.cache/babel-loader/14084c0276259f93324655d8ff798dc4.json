{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar featureQueries = require('caniuse-lite/data/features/css-featurequeries.js');\n\nvar _require = require('caniuse-lite'),\n    feature = _require.feature;\n\nvar _require2 = require('postcss'),\n    parse = _require2.parse;\n\nvar Browsers = require('./browsers');\n\nvar brackets = require('./brackets');\n\nvar Value = require('./value');\n\nvar utils = require('./utils');\n\nvar data = feature(featureQueries);\nvar supported = [];\n\nfor (var browser in data.stats) {\n  var versions = data.stats[browser];\n\n  for (var version in versions) {\n    var support = versions[version];\n\n    if (/y/.test(support)) {\n      supported.push(browser + ' ' + version);\n    }\n  }\n}\n\nvar Supports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Supports(Prefixes, all) {\n    _classCallCheck(this, Supports);\n\n    this.Prefixes = Prefixes;\n    this.all = all;\n  }\n  /**\n   * Return prefixer only with @supports supported browsers\n   */\n\n\n  _createClass(Supports, [{\n    key: \"prefixer\",\n    value: function prefixer() {\n      if (this.prefixerCache) {\n        return this.prefixerCache;\n      }\n\n      var filtered = this.all.browsers.selected.filter(function (i) {\n        return supported.includes(i);\n      });\n      var browsers = new Browsers(this.all.browsers.data, filtered, this.all.options);\n      this.prefixerCache = new this.Prefixes(this.all.data, browsers, this.all.options);\n      return this.prefixerCache;\n    }\n    /**\n     * Parse string into declaration property and value\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      var parts = str.split(':');\n      var prop = parts[0];\n      var value = parts[1];\n      if (!value) value = '';\n      return [prop.trim(), value.trim()];\n    }\n    /**\n     * Create virtual rule to process it by prefixer\n     */\n\n  }, {\n    key: \"virtual\",\n    value: function virtual(str) {\n      var _this$parse = this.parse(str),\n          _this$parse2 = _slicedToArray(_this$parse, 2),\n          prop = _this$parse2[0],\n          value = _this$parse2[1];\n\n      var rule = parse('a{}').first;\n      rule.append({\n        prop: prop,\n        value: value,\n        raws: {\n          before: ''\n        }\n      });\n      return rule;\n    }\n    /**\n     * Return array of Declaration with all necessary prefixes\n     */\n\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(str) {\n      var rule = this.virtual(str);\n\n      if (this.disabled(rule.first)) {\n        return rule.nodes;\n      }\n\n      var result = {\n        warn: function warn() {\n          return null;\n        }\n      };\n      var prefixer = this.prefixer().add[rule.first.prop];\n      prefixer && prefixer.process && prefixer.process(rule.first, result);\n\n      var _iterator = _createForOfIteratorHelper(rule.nodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var decl = _step.value;\n\n          var _iterator2 = _createForOfIteratorHelper(this.prefixer().values('add', rule.first.prop)),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var value = _step2.value;\n              value.process(decl);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          Value.save(this.all, decl);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return rule.nodes;\n    }\n    /**\n     * Return true if brackets node is \"not\" word\n     */\n\n  }, {\n    key: \"isNot\",\n    value: function isNot(node) {\n      return typeof node === 'string' && /not\\s*/i.test(node);\n    }\n    /**\n     * Return true if brackets node is \"or\" word\n     */\n\n  }, {\n    key: \"isOr\",\n    value: function isOr(node) {\n      return typeof node === 'string' && /\\s*or\\s*/i.test(node);\n    }\n    /**\n     * Return true if brackets node is (prop: value)\n     */\n\n  }, {\n    key: \"isProp\",\n    value: function isProp(node) {\n      return typeof node === 'object' && node.length === 1 && typeof node[0] === 'string';\n    }\n    /**\n     * Return true if prefixed property has no unprefixed\n     */\n\n  }, {\n    key: \"isHack\",\n    value: function isHack(all, unprefixed) {\n      var check = new RegExp(\"(\\\\(|\\\\s)\".concat(utils.escapeRegexp(unprefixed), \":\"));\n      return !check.test(all);\n    }\n    /**\n     * Return true if we need to remove node\n     */\n\n  }, {\n    key: \"toRemove\",\n    value: function toRemove(str, all) {\n      var _this$parse3 = this.parse(str),\n          _this$parse4 = _slicedToArray(_this$parse3, 2),\n          prop = _this$parse4[0],\n          value = _this$parse4[1];\n\n      var unprefixed = this.all.unprefixed(prop);\n      var cleaner = this.all.cleaner();\n\n      if (cleaner.remove[prop] && cleaner.remove[prop].remove && !this.isHack(all, unprefixed)) {\n        return true;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(cleaner.values('remove', unprefixed)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var checker = _step3.value;\n\n          if (checker.check(value)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return false;\n    }\n    /**\n     * Remove all unnecessary prefixes\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(nodes, all) {\n      var i = 0;\n\n      while (i < nodes.length) {\n        if (!this.isNot(nodes[i - 1]) && this.isProp(nodes[i]) && this.isOr(nodes[i + 1])) {\n          if (this.toRemove(nodes[i][0], all)) {\n            nodes.splice(i, 2);\n            continue;\n          }\n\n          i += 2;\n          continue;\n        }\n\n        if (typeof nodes[i] === 'object') {\n          nodes[i] = this.remove(nodes[i], all);\n        }\n\n        i += 1;\n      }\n\n      return nodes;\n    }\n    /**\n     * Clean brackets with one child\n     */\n\n  }, {\n    key: \"cleanBrackets\",\n    value: function cleanBrackets(nodes) {\n      var _this = this;\n\n      return nodes.map(function (i) {\n        if (typeof i !== 'object') {\n          return i;\n        }\n\n        if (i.length === 1 && typeof i[0] === 'object') {\n          return _this.cleanBrackets(i[0]);\n        }\n\n        return _this.cleanBrackets(i);\n      });\n    }\n    /**\n     * Add \" or \" between properties and convert it to brackets format\n     */\n\n  }, {\n    key: \"convert\",\n    value: function convert(progress) {\n      var result = [''];\n\n      var _iterator4 = _createForOfIteratorHelper(progress),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var i = _step4.value;\n          result.push([\"\".concat(i.prop, \": \").concat(i.value)]);\n          result.push(' or ');\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      result[result.length - 1] = '';\n      return result;\n    }\n    /**\n     * Compress value functions into a string nodes\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(nodes) {\n      var _this2 = this;\n\n      if (typeof nodes !== 'object') {\n        return nodes;\n      }\n\n      nodes = nodes.filter(function (i) {\n        return i !== '';\n      });\n\n      if (typeof nodes[0] === 'string') {\n        var firstNode = nodes[0].trim();\n\n        if (firstNode.includes(':') || firstNode === 'selector' || firstNode === 'not selector') {\n          return [brackets.stringify(nodes)];\n        }\n      }\n\n      return nodes.map(function (i) {\n        return _this2.normalize(i);\n      });\n    }\n    /**\n     * Add prefixes\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(nodes, all) {\n      var _this3 = this;\n\n      return nodes.map(function (i) {\n        if (_this3.isProp(i)) {\n          var prefixed = _this3.prefixed(i[0]);\n\n          if (prefixed.length > 1) {\n            return _this3.convert(prefixed);\n          }\n\n          return i;\n        }\n\n        if (typeof i === 'object') {\n          return _this3.add(i, all);\n        }\n\n        return i;\n      });\n    }\n    /**\n     * Add prefixed declaration\n     */\n\n  }, {\n    key: \"process\",\n    value: function process(rule) {\n      var ast = brackets.parse(rule.params);\n      ast = this.normalize(ast);\n      ast = this.remove(ast, rule.params);\n      ast = this.add(ast, rule.params);\n      ast = this.cleanBrackets(ast);\n      rule.params = brackets.stringify(ast);\n    }\n    /**\n     * Check global options\n     */\n\n  }, {\n    key: \"disabled\",\n    value: function disabled(node) {\n      if (!this.all.options.grid) {\n        if (node.prop === 'display' && node.value.includes('grid')) {\n          return true;\n        }\n\n        if (node.prop.includes('grid') || node.prop === 'justify-items') {\n          return true;\n        }\n      }\n\n      if (this.all.options.flexbox === false) {\n        if (node.prop === 'display' && node.value.includes('flex')) {\n          return true;\n        }\n\n        var other = ['order', 'justify-content', 'align-items', 'align-content'];\n\n        if (node.prop.includes('flex') || other.includes(node.prop)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Supports;\n}();\n\nmodule.exports = Supports;","map":{"version":3,"names":["featureQueries","require","feature","parse","Browsers","brackets","Value","utils","data","supported","browser","stats","versions","version","support","test","push","Supports","Prefixes","all","prefixerCache","filtered","browsers","selected","filter","i","includes","options","str","parts","split","prop","value","trim","rule","first","append","raws","before","virtual","disabled","nodes","result","warn","prefixer","add","process","decl","values","save","node","length","unprefixed","check","RegExp","escapeRegexp","cleaner","remove","isHack","checker","isNot","isProp","isOr","toRemove","splice","map","cleanBrackets","progress","firstNode","stringify","normalize","prefixed","convert","ast","params","grid","flexbox","other","module","exports"],"sources":["C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/autoprefixer/lib/supports.js"],"sourcesContent":["let featureQueries = require('caniuse-lite/data/features/css-featurequeries.js')\nlet { feature } = require('caniuse-lite')\nlet { parse } = require('postcss')\n\nlet Browsers = require('./browsers')\nlet brackets = require('./brackets')\nlet Value = require('./value')\nlet utils = require('./utils')\n\nlet data = feature(featureQueries)\n\nlet supported = []\nfor (let browser in data.stats) {\n  let versions = data.stats[browser]\n  for (let version in versions) {\n    let support = versions[version]\n    if (/y/.test(support)) {\n      supported.push(browser + ' ' + version)\n    }\n  }\n}\n\nclass Supports {\n  constructor(Prefixes, all) {\n    this.Prefixes = Prefixes\n    this.all = all\n  }\n\n  /**\n   * Return prefixer only with @supports supported browsers\n   */\n  prefixer() {\n    if (this.prefixerCache) {\n      return this.prefixerCache\n    }\n\n    let filtered = this.all.browsers.selected.filter(i => {\n      return supported.includes(i)\n    })\n\n    let browsers = new Browsers(\n      this.all.browsers.data,\n      filtered,\n      this.all.options\n    )\n    this.prefixerCache = new this.Prefixes(\n      this.all.data,\n      browsers,\n      this.all.options\n    )\n    return this.prefixerCache\n  }\n\n  /**\n   * Parse string into declaration property and value\n   */\n  parse(str) {\n    let parts = str.split(':')\n    let prop = parts[0]\n    let value = parts[1]\n    if (!value) value = ''\n    return [prop.trim(), value.trim()]\n  }\n\n  /**\n   * Create virtual rule to process it by prefixer\n   */\n  virtual(str) {\n    let [prop, value] = this.parse(str)\n    let rule = parse('a{}').first\n    rule.append({ prop, value, raws: { before: '' } })\n    return rule\n  }\n\n  /**\n   * Return array of Declaration with all necessary prefixes\n   */\n  prefixed(str) {\n    let rule = this.virtual(str)\n    if (this.disabled(rule.first)) {\n      return rule.nodes\n    }\n\n    let result = { warn: () => null }\n\n    let prefixer = this.prefixer().add[rule.first.prop]\n    prefixer && prefixer.process && prefixer.process(rule.first, result)\n\n    for (let decl of rule.nodes) {\n      for (let value of this.prefixer().values('add', rule.first.prop)) {\n        value.process(decl)\n      }\n      Value.save(this.all, decl)\n    }\n\n    return rule.nodes\n  }\n\n  /**\n   * Return true if brackets node is \"not\" word\n   */\n  isNot(node) {\n    return typeof node === 'string' && /not\\s*/i.test(node)\n  }\n\n  /**\n   * Return true if brackets node is \"or\" word\n   */\n  isOr(node) {\n    return typeof node === 'string' && /\\s*or\\s*/i.test(node)\n  }\n\n  /**\n   * Return true if brackets node is (prop: value)\n   */\n  isProp(node) {\n    return (\n      typeof node === 'object' &&\n      node.length === 1 &&\n      typeof node[0] === 'string'\n    )\n  }\n\n  /**\n   * Return true if prefixed property has no unprefixed\n   */\n  isHack(all, unprefixed) {\n    let check = new RegExp(`(\\\\(|\\\\s)${utils.escapeRegexp(unprefixed)}:`)\n    return !check.test(all)\n  }\n\n  /**\n   * Return true if we need to remove node\n   */\n  toRemove(str, all) {\n    let [prop, value] = this.parse(str)\n    let unprefixed = this.all.unprefixed(prop)\n\n    let cleaner = this.all.cleaner()\n\n    if (\n      cleaner.remove[prop] &&\n      cleaner.remove[prop].remove &&\n      !this.isHack(all, unprefixed)\n    ) {\n      return true\n    }\n\n    for (let checker of cleaner.values('remove', unprefixed)) {\n      if (checker.check(value)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Remove all unnecessary prefixes\n   */\n  remove(nodes, all) {\n    let i = 0\n    while (i < nodes.length) {\n      if (\n        !this.isNot(nodes[i - 1]) &&\n        this.isProp(nodes[i]) &&\n        this.isOr(nodes[i + 1])\n      ) {\n        if (this.toRemove(nodes[i][0], all)) {\n          nodes.splice(i, 2)\n          continue\n        }\n\n        i += 2\n        continue\n      }\n\n      if (typeof nodes[i] === 'object') {\n        nodes[i] = this.remove(nodes[i], all)\n      }\n\n      i += 1\n    }\n    return nodes\n  }\n\n  /**\n   * Clean brackets with one child\n   */\n  cleanBrackets(nodes) {\n    return nodes.map(i => {\n      if (typeof i !== 'object') {\n        return i\n      }\n\n      if (i.length === 1 && typeof i[0] === 'object') {\n        return this.cleanBrackets(i[0])\n      }\n\n      return this.cleanBrackets(i)\n    })\n  }\n\n  /**\n   * Add \" or \" between properties and convert it to brackets format\n   */\n  convert(progress) {\n    let result = ['']\n    for (let i of progress) {\n      result.push([`${i.prop}: ${i.value}`])\n      result.push(' or ')\n    }\n    result[result.length - 1] = ''\n    return result\n  }\n\n  /**\n   * Compress value functions into a string nodes\n   */\n  normalize(nodes) {\n    if (typeof nodes !== 'object') {\n      return nodes\n    }\n\n    nodes = nodes.filter(i => i !== '')\n\n    if (typeof nodes[0] === 'string') {\n      let firstNode = nodes[0].trim()\n\n      if (\n        firstNode.includes(':') ||\n        firstNode === 'selector' ||\n        firstNode === 'not selector'\n      ) {\n        return [brackets.stringify(nodes)]\n      }\n    }\n    return nodes.map(i => this.normalize(i))\n  }\n\n  /**\n   * Add prefixes\n   */\n  add(nodes, all) {\n    return nodes.map(i => {\n      if (this.isProp(i)) {\n        let prefixed = this.prefixed(i[0])\n        if (prefixed.length > 1) {\n          return this.convert(prefixed)\n        }\n\n        return i\n      }\n\n      if (typeof i === 'object') {\n        return this.add(i, all)\n      }\n\n      return i\n    })\n  }\n\n  /**\n   * Add prefixed declaration\n   */\n  process(rule) {\n    let ast = brackets.parse(rule.params)\n    ast = this.normalize(ast)\n    ast = this.remove(ast, rule.params)\n    ast = this.add(ast, rule.params)\n    ast = this.cleanBrackets(ast)\n    rule.params = brackets.stringify(ast)\n  }\n\n  /**\n   * Check global options\n   */\n  disabled(node) {\n    if (!this.all.options.grid) {\n      if (node.prop === 'display' && node.value.includes('grid')) {\n        return true\n      }\n      if (node.prop.includes('grid') || node.prop === 'justify-items') {\n        return true\n      }\n    }\n\n    if (this.all.options.flexbox === false) {\n      if (node.prop === 'display' && node.value.includes('flex')) {\n        return true\n      }\n      let other = ['order', 'justify-content', 'align-items', 'align-content']\n      if (node.prop.includes('flex') || other.includes(node.prop)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nmodule.exports = Supports\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}