{"ast":null,"code":"var _slicedToArray = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar flexSpec = require('./flex-spec');\n\nvar OldValue = require('../old-value');\n\nvar Value = require('../value');\n\nvar DisplayFlex = /*#__PURE__*/function (_Value) {\n  \"use strict\";\n\n  _inherits(DisplayFlex, _Value);\n\n  var _super = _createSuper(DisplayFlex);\n\n  function DisplayFlex(name, prefixes) {\n    var _this;\n\n    _classCallCheck(this, DisplayFlex);\n\n    _this = _super.call(this, name, prefixes);\n\n    if (name === 'display-flex') {\n      _this.name = 'flex';\n    }\n\n    return _this;\n  }\n  /**\n   * Faster check for flex value\n   */\n\n\n  _createClass(DisplayFlex, [{\n    key: \"check\",\n    value: function check(decl) {\n      return decl.prop === 'display' && decl.value === this.name;\n    }\n    /**\n     * Return value by spec\n     */\n\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(prefix) {\n      var spec, value;\n\n      var _flexSpec = flexSpec(prefix);\n\n      var _flexSpec2 = _slicedToArray(_flexSpec, 2);\n\n      spec = _flexSpec2[0];\n      prefix = _flexSpec2[1];\n\n      if (spec === 2009) {\n        if (this.name === 'flex') {\n          value = 'box';\n        } else {\n          value = 'inline-box';\n        }\n      } else if (spec === 2012) {\n        if (this.name === 'flex') {\n          value = 'flexbox';\n        } else {\n          value = 'inline-flexbox';\n        }\n      } else if (spec === 'final') {\n        value = this.name;\n      }\n\n      return prefix + value;\n    }\n    /**\n     * Add prefix to value depend on flebox spec version\n     */\n\n  }, {\n    key: \"replace\",\n    value: function replace(string, prefix) {\n      return this.prefixed(prefix);\n    }\n    /**\n     * Change value for old specs\n     */\n\n  }, {\n    key: \"old\",\n    value: function old(prefix) {\n      var prefixed = this.prefixed(prefix);\n      if (!prefixed) return undefined;\n      return new OldValue(this.name, prefixed);\n    }\n  }]);\n\n  return DisplayFlex;\n}(Value);\n\nDisplayFlex.names = ['display-flex', 'inline-flex'];\nmodule.exports = DisplayFlex;","map":{"version":3,"names":["flexSpec","require","OldValue","Value","DisplayFlex","name","prefixes","decl","prop","value","prefix","spec","string","prefixed","undefined","names","module","exports"],"sources":["C:/Users/Marcos/Desktop/capgmenini-api/frontend/node_modules/autoprefixer/lib/hacks/display-flex.js"],"sourcesContent":["let flexSpec = require('./flex-spec')\nlet OldValue = require('../old-value')\nlet Value = require('../value')\n\nclass DisplayFlex extends Value {\n  constructor(name, prefixes) {\n    super(name, prefixes)\n    if (name === 'display-flex') {\n      this.name = 'flex'\n    }\n  }\n\n  /**\n   * Faster check for flex value\n   */\n  check(decl) {\n    return decl.prop === 'display' && decl.value === this.name\n  }\n\n  /**\n   * Return value by spec\n   */\n  prefixed(prefix) {\n    let spec, value\n    ;[spec, prefix] = flexSpec(prefix)\n\n    if (spec === 2009) {\n      if (this.name === 'flex') {\n        value = 'box'\n      } else {\n        value = 'inline-box'\n      }\n    } else if (spec === 2012) {\n      if (this.name === 'flex') {\n        value = 'flexbox'\n      } else {\n        value = 'inline-flexbox'\n      }\n    } else if (spec === 'final') {\n      value = this.name\n    }\n\n    return prefix + value\n  }\n\n  /**\n   * Add prefix to value depend on flebox spec version\n   */\n  replace(string, prefix) {\n    return this.prefixed(prefix)\n  }\n\n  /**\n   * Change value for old specs\n   */\n  old(prefix) {\n    let prefixed = this.prefixed(prefix)\n    if (!prefixed) return undefined\n    return new OldValue(this.name, prefixed)\n  }\n}\n\nDisplayFlex.names = ['display-flex', 'inline-flex']\n\nmodule.exports = DisplayFlex\n"],"mappings":";;;;;;;;;;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,UAAD,CAAnB;;IAEMG,W;;;;;;;EACJ,qBAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;IAAA;;IAAA;;IAC1B,0BAAMD,IAAN,EAAYC,QAAZ;;IACA,IAAID,IAAI,KAAK,cAAb,EAA6B;MAC3B,MAAKA,IAAL,GAAY,MAAZ;IACD;;IAJyB;EAK3B;EAED;AACF;AACA;;;;;WACE,eAAME,IAAN,EAAY;MACV,OAAOA,IAAI,CAACC,IAAL,KAAc,SAAd,IAA2BD,IAAI,CAACE,KAAL,KAAe,KAAKJ,IAAtD;IACD;IAED;AACF;AACA;;;;WACE,kBAASK,MAAT,EAAiB;MACf,IAAIC,IAAJ,EAAUF,KAAV;;MADe,gBAEGT,QAAQ,CAACU,MAAD,CAFX;;MAAA;;MAEbC,IAFa;MAEPD,MAFO;;MAIf,IAAIC,IAAI,KAAK,IAAb,EAAmB;QACjB,IAAI,KAAKN,IAAL,KAAc,MAAlB,EAA0B;UACxBI,KAAK,GAAG,KAAR;QACD,CAFD,MAEO;UACLA,KAAK,GAAG,YAAR;QACD;MACF,CAND,MAMO,IAAIE,IAAI,KAAK,IAAb,EAAmB;QACxB,IAAI,KAAKN,IAAL,KAAc,MAAlB,EAA0B;UACxBI,KAAK,GAAG,SAAR;QACD,CAFD,MAEO;UACLA,KAAK,GAAG,gBAAR;QACD;MACF,CANM,MAMA,IAAIE,IAAI,KAAK,OAAb,EAAsB;QAC3BF,KAAK,GAAG,KAAKJ,IAAb;MACD;;MAED,OAAOK,MAAM,GAAGD,KAAhB;IACD;IAED;AACF;AACA;;;;WACE,iBAAQG,MAAR,EAAgBF,MAAhB,EAAwB;MACtB,OAAO,KAAKG,QAAL,CAAcH,MAAd,CAAP;IACD;IAED;AACF;AACA;;;;WACE,aAAIA,MAAJ,EAAY;MACV,IAAIG,QAAQ,GAAG,KAAKA,QAAL,CAAcH,MAAd,CAAf;MACA,IAAI,CAACG,QAAL,EAAe,OAAOC,SAAP;MACf,OAAO,IAAIZ,QAAJ,CAAa,KAAKG,IAAlB,EAAwBQ,QAAxB,CAAP;IACD;;;;EAvDuBV,K;;AA0D1BC,WAAW,CAACW,KAAZ,GAAoB,CAAC,cAAD,EAAiB,aAAjB,CAApB;AAEAC,MAAM,CAACC,OAAP,GAAiBb,WAAjB"},"metadata":{},"sourceType":"script"}