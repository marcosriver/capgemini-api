[{"C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\index.js":"1","C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\App.js":"2","C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\components\\Accordion.js":"4","C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\components\\AccordionItem.js":"5"},{"size":488,"mtime":1663607996915,"results":"6","hashOfConfig":"7"},{"size":7694,"mtime":1663801727375,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1661699005998,"results":"9","hashOfConfig":"7"},{"size":648,"mtime":1663610440851,"results":"10","hashOfConfig":"7"},{"size":2296,"mtime":1663628814773,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"e9oyyi",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"15"},"C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\index.js",[],[],[],"C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\App.js",["30","31","32","33","34","35","36","37","38","39"],[],"import './App.css';\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport Accordion from \"./components/Accordion\";\nimport { HiPlusCircle, HiSearchCircle, HiUserCircle } from \"react-icons/hi\";\nimport { data } from 'autoprefixer';\n\nconst User = () => {\n\n  const [data, setData] = useState({})\n  const [userId, setUserId] = useState({ id: \"\" });\n  const [loading, setLoading] = useState(false);\n\n  const inputRef = React.createRef()\n\n  const getData = id => {\n    const result = axios(\n      process.env.REACT_APP_API + '/api/v1/users/' + id,\n    ).then((response) => {\n\n      return response.data;\n    }).catch((error) => {\n      if (error.response.status === 404) {\n        console.log(\"User not found!!!\")\n      }\n    });\n\n    return result;\n\n  }\n\n  const updateInput = () => {\n    const inputText = inputRef.current.value;\n    console.log(\"setting the user id: \" + inputText);\n    setUserId({ id: inputText });\n  }\n\n  useEffect(() => {\n\n    const getUser = async () => {\n\n      const userData = await getData(userId.id);\n\n      if (userData) {\n\n        setData(userData);\n      }\n    }\n\n    if (userId.id !== undefined) {\n      getUser();\n    }\n\n\n  }, [userId]);\n\n  let userInfoDisplay;\n\n  userInfoDisplay = userId.id === undefined ?\n    <div></div> :\n    (<div className='userInfoDisplay pt-10'>\n      <div className='flex flex-row space-x-7 pl-3'>\n        <div className='text-[#7D7D7D]'>Name</div>\n        <div className='text-[#7D7D7D]'>{data.userName === null ? null : data.userName}</div>\n      </div>\n      <div className='flex flex-row space-x-7 pl-3'>\n        <div className='text-[#7D7D7D]'>Surname</div>\n        <div className='text-[#7D7D7D]'>{data.surname === null ? null : data.surname}</div>\n      </div>\n\n\n      {data.accounts && <Accordion data={data.accounts} />}\n    </div>);\n\n  return (<div className=\"userInformationSection\">\n    <div className='inputUserId pt-20'>\n      <h1 className='text-2xl font-bold pl-3'>User Information</h1>\n      <div className='pt-6 flex flex-row'>\n        <div className='relative '>\n          <div className='font-semibold pl-3'>User ID</div>\n          <input type=\"number\" min=\"1\" ref={inputRef} className=' bg-[#BDB7E7] rounded-full text-white text-s border-transparent' />\n        </div>\n\n        <HiSearchCircle onClick={updateInput} className=\"relative left-5 top-5 w-12 h-12 group-hover:text-white text-[#BDB7E7]\" />\n      </div>\n\n    </div>\n    {userInfoDisplay}\n  </div>);\n\n};\n\n\nfunction App() {\n\n  const [load, setLoad] = React.useState(false);\n  const [users, setUsers] = React.useState([]);\n  const [ignored, forceUpdate] = React.useReducer(x => x + 1, 0);\n\n\n\n  const userRef = React.createRef()\n  const initialAmountRef = React.createRef()\n  const createUserNameRef = React.createRef()\n  const createUserSurnameRef = React.createRef()\n  const newTransactionAccountIdRef = React.createRef()\n  const newTransactionOperationRef = React.createRef()\n  const newTransactionAmountRef = React.createRef()\n\n  const fetchAllUsers = () => {\n\n    const result = axios(\n      process.env.REACT_APP_API + '/api/v1/users/',\n    ).then((response) => {\n\n      setUsers(response.data);\n\n    }).catch((error) => {\n      if (error.response.status === 404) {\n        console.log(\"User not found!!!\")\n      }\n    })\n  }\n\n  useEffect(() => {\n    fetchAllUsers();\n  }, []);\n\n  const createNewUser = () => {\n    const userName = createUserNameRef.current.value;\n    const userSurname = createUserSurnameRef.current.value;\n\n    if (!userName || !userName) {\n\n      alert(\"There is missing information to create an account\");\n    } else {\n      const result = axios.post(process.env.REACT_APP_API + '/api/v1/users', {\n        userName: userName,\n        surname: userSurname,\n      }).then((response) => {\n        const user = response.data;\n        alert(`The account was created succesfully for the user ${user.userName} ${user.surname}`);\n\n        forceUpdate();\n        userRef.current.value = \"\";\n        initialAmountRef.current.value = \"\";\n      }).catch((error) => {\n\n        alert(\"Problem creating the user\");\n      });\n\n    }\n\n  }\n\n  const createNewAccount = () => {\n    const userId = userRef.current.value;\n    const initialAmount = initialAmountRef.current.value;\n\n    setLoad(true);\n    if (!userId) {\n\n      alert(\"There is no userID\");\n    } else {\n      const result = axios.post(process.env.REACT_APP_API + '/api/v1/accounts', {\n        amount: initialAmount,\n        user: {\n          userId: userId\n        }\n      }).then((response) => {\n\n        alert(\"The account was created succesfully\");\n\n        userRef.current.value = \"\";\n        initialAmountRef.current.value = \"\";\n      }).catch((error) => {\n        if (error.response.status === 404) {\n          alert(\"The user does not exists\")\n        }\n      });\n\n      setLoad(false);\n\n    }\n\n  }\n\n\n\n  return (\n    <div className=\"App pl-10 pt-7 flex flex-row\">\n      <div>\n        <div className=\"createAccountSection\">\n          <h1 className='text-2xl font-bold pl-3'>Create new account</h1>\n          <div className='flex flex-row space-x-20 pt-6'>\n            <div>\n              <div className='font-semibold pl-3'>User Id</div>\n              <input ref={userRef} type=\"text\" className='bg-[#BDB7E7] rounded-full text-white text-s border-transparent' />\n            </div>\n            <div className='relative'>\n              <div className='font-semibold pl-3'>Initial amount</div>\n              <input ref={initialAmountRef} type=\"number\" className='bg-[#BDB7E7] rounded-full text-white text-s border-transparent' />\n            </div>\n\n            <HiPlusCircle disabled={load} onClick={\n              createNewAccount} className=\"relative -left-10 top-5 w-12 h-12 group-hover:text-white text-[#BDB7E7]\" />\n\n          </div>\n        </div>\n        <User></User>\n      </div>\n      <div className='pl-5'>\n        <div className=\"createNewUserSection\">\n          <h1 className='text-2xl font-bold pl-3'>Create new user</h1>\n          <div className='flex flex-row space-x-20 pt-6'>\n\n            <div className='relative'>\n              <div className='font-semibold pl-3'>Name</div>\n              <input ref={createUserNameRef} type=\"text\" className='bg-[#BDB7E7] rounded-full text-white text-s border-transparent' />\n            </div>\n            <div className='relative'>\n              <div className='font-semibold pl-3'>Surname</div>\n              <input ref={createUserSurnameRef} type=\"text\" className='bg-[#BDB7E7] rounded-full text-white text-s border-transparent' />\n            </div>\n\n            <HiUserCircle disabled={load} onClick={\n              createNewUser} className=\"relative -left-10 top-5 w-12 h-12 group-hover:text-white text-[#BDB7E7]\" />\n          </div>\n        </div>\n        <div className='pl-3'>\n          <h1 className='text-2xl font-bold pt-20'>List of Users</h1>\n          <table className=\"table-fixed border-separate border border-spacing-5 rounded-md bg-[#BDB7E7]\">\n            <thead>\n              <tr>\n                <th className='text-white'>ID</th>\n                <th className='text-white'>Name</th>\n                <th className='text-white'>Surname</th>\n              </tr>\n            </thead>\n            <tbody className='border-spacing-5'>\n\n              {users.map((user) => {\n                return (\n                  <tr>\n                    <td className='text-white'>{user.id}</td>\n                    <td className='text-white'>{user.userName}</td>\n                    <td className='text-white'>{user.surname}</td>\n                  </tr>\n                )\n              })}\n\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\components\\Accordion.js",[],[],"C:\\Users\\Marcos\\Desktop\\capgmenini-api\\frontend\\src\\components\\AccordionItem.js",["40"],[],"import { Accordion } from \"flowbite-react\";\r\nimport React from \"react\";\r\nimport { HiArrowCircleDown, HiX } from \"react-icons/hi\";\r\n\r\nconst AccordionItem = ({ accountNumber, accountBalance, transactions, Id, Index, setIndex }) => {\r\n    const handleSetIndex = (Id) => Index !== Id ? setIndex(Id) : setIndex(undefined);\r\n    const closeIndex = () => setIndex(undefined)\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                onClick={() => handleSetIndex(Id)}\r\n                className={`flex group cursor-pointer w-full h-16 justify-between  items-center p-2 mt-2\r\n                 ${Index === Id ? \"rounded-t-md hover:bg-white bg-[#BDB7E7] hover:shadow-lg\" : \"rounded-md bg-white hover:bg-[#BDB7E7]\"}\r\n                     focus:bg-pink-500 `}\r\n            >\r\n                <div className=\"flex group cursor-pointer\">\r\n                    <div className={`font-semibold ${Index === Id ? \"text-white group-hover:text-[#BDB7E7]\" : \"text-[#BDB7E7] group-hover:text-white\"} `}>\r\n                        {`Account ${accountNumber} - Balance ${accountBalance}`}\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex items-center justify-center pr-10\">\r\n                    {Index !== Id ? (\r\n                        <HiArrowCircleDown className=\"w-6 h-6 group-hover:text-white text-[#BDB7E7]\" />\r\n                    ) : (\r\n                        <HiX onClick={closeIndex} className={`${Index === Id ? \"group-hover:text-[#BDB7E7] text-white\" : \"group-hover:text-white text-white\"} w-6 h-6 `} />\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {Index === Id && (\r\n                <div className=\"bg-pink-100  font-semibold text-pink-500 w-full h-auto  rounded-b-md p-4 border-l-2 border-blue-300 mb-2 \">\r\n                    <ol>\r\n                        {transactions.length > 0 ? transactions.map((transaction, index) => {\r\n                            return (\r\n                                <li>Transaction {transaction.transactionId} - {transaction.transactionType} - {transaction.amount}</li>)\r\n                        }) :\r\n                            <li>There are no transactions</li>}\r\n                    </ol>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AccordionItem;",{"ruleId":"41","severity":1,"message":"42","line":6,"column":10,"nodeType":"43","messageId":"44","endLine":6,"endColumn":14},{"ruleId":"41","severity":1,"message":"45","line":12,"column":10,"nodeType":"43","messageId":"44","endLine":12,"endColumn":17},{"ruleId":"41","severity":1,"message":"46","line":12,"column":19,"nodeType":"43","messageId":"44","endLine":12,"endColumn":29},{"ruleId":"41","severity":1,"message":"47","line":98,"column":10,"nodeType":"43","messageId":"44","endLine":98,"endColumn":17},{"ruleId":"41","severity":1,"message":"48","line":106,"column":9,"nodeType":"43","messageId":"44","endLine":106,"endColumn":35},{"ruleId":"41","severity":1,"message":"49","line":107,"column":9,"nodeType":"43","messageId":"44","endLine":107,"endColumn":35},{"ruleId":"41","severity":1,"message":"50","line":108,"column":9,"nodeType":"43","messageId":"44","endLine":108,"endColumn":32},{"ruleId":"41","severity":1,"message":"51","line":112,"column":11,"nodeType":"43","messageId":"44","endLine":112,"endColumn":17},{"ruleId":"41","severity":1,"message":"51","line":137,"column":13,"nodeType":"43","messageId":"44","endLine":137,"endColumn":19},{"ruleId":"41","severity":1,"message":"51","line":165,"column":13,"nodeType":"43","messageId":"44","endLine":165,"endColumn":19},{"ruleId":"41","severity":1,"message":"52","line":1,"column":10,"nodeType":"43","messageId":"44","endLine":1,"endColumn":19},"no-unused-vars","'data' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'ignored' is assigned a value but never used.","'newTransactionAccountIdRef' is assigned a value but never used.","'newTransactionOperationRef' is assigned a value but never used.","'newTransactionAmountRef' is assigned a value but never used.","'result' is assigned a value but never used.","'Accordion' is defined but never used."]